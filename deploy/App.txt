<!DOCTYPE html>
<html>
<head>
    <title>Audit Report</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Feb 07 2019 12:55:14 GMT-0600 (Central Standard Time) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Feb 07 2019 12:55:14 GMT-0600 (Central Standard Time)";
        var CHECKSUM = 2450100873;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("TSAuditReport", {
    extend: 'Rally.app.TimeboxScopedApp',
    componentCls: 'app',
    scopeType: 'iteration',
    comboboxConfig: {
        fieldLabel: 'Select an Iteration:',
        labelWidth: 100,
        width: 300
    },
    onScopeChange: function() {
			this._MakeGrid();
	},
    _MakeGrid: function() {
        var me = this;
        this.setLoading("Loading Data...");
        
        this._getHistory('HierarchicalRequirement').then({
            scope: this,
            success: function(records) {
                if (records.length > 0) {
                this._assignUsersToRecords(records).then({
                    scope: this,
                    success:function(records) {
                        var store = this._createStore(records);
                        this._displayGrid(store);
                    },
                    failure: function(error_message) {
                        alert(error_message);
                    }
                });
            } else {
                this.setLoading(false);
                alert("No Records Found");
                return;
        }
                
            },
            failure: function(error_message){
                alert(error_message);
            }
        }).always(function() {
            
        });
    },
    _assignUsersToRecords: function(records) {
        var deferred = Ext.create('Deft.Deferred');
        var users_to_check = [];
        var me = this;
        
        Ext.Array.each(records, function(record) {
            var user = record.get('_User');
            var user_filter = { property:'ObjectID', value: user };
            
            users_to_check = Ext.Array.merge(users_to_check,[user]);
            
        });
        var user_filter = Ext.Array.map(users_to_check, function(u) {
            return { property:'ObjectID', value: u };
        });
        Ext.create('Rally.data.wsapi.Store',{
            model: 'User',
            filters:Rally.data.wsapi.Filter.or(user_filter),
            fetch: ['_refObjectName','UserName','Role']
        }).load({
            callback : function(users, operation, successful) {
                if (successful){
                    var user_hash = {};
                    Ext.Array.each(users, function(user) {
                        user_hash[user.get('ObjectID')] = user;
                    });
                    
                    Ext.Array.each(records, function(record){
                        record.set('__UserObject', user_hash[record.get('_User')]);
                    });
                    
                    deferred.resolve(records);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });        
        return deferred.promise;
    },
    _createStore: function(records) {
        var store = Ext.create('Rally.data.custom.Store',{
            data: records
        });
        return store;
    },
    _getHistory: function(model_name){
        var iOID = null;
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        if (this.getContext().getTimeboxScope().getRecord() != null) {
        iOID = me.getContext().getTimeboxScope().getRecord().get("ObjectID");
        }
        Ext.create('Rally.data.lookback.SnapshotStore', {
            filters: [
                {property: '_TypeHierarchy', operator: 'in', value: ['HierarchicalRequirement']},
                {property: '_ProjectHierarchy', value: me.getContext().getProject().ObjectID },
                { property: "_PreviousValues.ScheduleState", operator: "exists", value: true },
                { property: "ScheduleState", operator: '=', value: "Accepted" },
                { property: "Iteration", value: iOID }
            ],
            fetch: ['_User','ScheduleState','_PreviousValues.ScheduleState','ObjectID','FormattedID','Name','Iteration'],
            hydrate: ['ScheduleState','_PreviousValues.ScheduleState','Iteration']
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    _displayGrid: function(store){
        var columns = [
            { dataIndex: 'FormattedID', text: 'id' },
            { dataIndex: 'Name', text: 'id', flex: 1 },
            { dataIndex: '_PreviousValues.ScheduleState', text: 'From State', renderer: function(value) {
                if ( !value ) {
                    return "No Previous State";
                }
                return value;
            } },

            { dataIndex: 'ScheduleState', text: 'Into State' },
            { dataIndex: '__UserObject', text: 'Who', renderer: function(value, meta_data, record) {
                if ( !value ) {
                    meta_data.tdCls = 'red';
                    return '--';
                }
                if ( !value.get('_refObjectName') ) {
                    meta_data.tdCls = "yellow";
                    return '--';
                }
                
                return value.get('_refObjectName');
            } },
            {dataIndex: '__UserObject', text: 'Role', renderer: function(value, meta_data, record) {
                return value.get('Role');
            } },
            { dataIndex: '_ValidFrom', text: 'When', renderer: function(value) {
                if ( !value ) { return "--"; }
                var display_value = Rally.util.DateTime.fromIsoString(value);
                return Ext.util.Format.date(display_value, 'Y-m-d');
            } }
        ];
    if (this._grid) this._grid.destroy();
    this._grid = this.add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: columns
        });
        
        this.setLoading(false);
    }
});

            
               Rally.launchApp('TSAuditReport', {
                   name: 'Audit Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.red {
    background-color: 'red';
}

.yellow {
    background-color: 'yellow';
}

    </style>

</head>
<body></body>
</html>